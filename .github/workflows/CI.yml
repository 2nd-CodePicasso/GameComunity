name: Java CI with Gradle

on:
  push:
    branches:
      - dev
      - "release_*"
  pull_request:
    branches:
      - dev
      - "release_*"
      
jobs: 
  block-merge-to-release:
    runs-on: ubuntu-latest 
    if: ${{ (startsWith(github.base_ref, 'release_') && github.head_ref != 'dev') || (startsWith(github.head_ref, 'release_') && github.base_ref != 'main') }}
    
    steps:
      - name: 머지 차단 (dev → release / release → main 규칙 강제)
        env:
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
        run: |
          BLOCKED=0
          if [[ "$BASE_REF" =~ ^release_.* && "$HEAD_REF" != "dev" ]]; then
            echo "::error title=Merge Blocked::❌ 'dev' 브랜치에서만 release 브랜치로 merge 할 수 있습니다."
            BLOCKED=1
          fi
          
          if [[ "$HEAD_REF" =~ ^release_.* && "$BASE_REF" != "main" ]]; then
            echo "::error title=Merge Blocked::❌ 'release' 브랜치에서만 main 브랜치로 merge 할 수 있습니다."
            BLOCKED=1
          fi
         
          if [[ "$BLOCKED" -eq 1 ]]; then
            exit 1
          fi
          
  build: 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v4
   
    - name: JDK 17 설치
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Gradlew 접근 권한 설정
      run: chmod +x gradlew
        
    - name: 메인 yml파일 생성
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./myInfo.yml
        echo "${{ secrets.MYINFO }}" > ./myInfo.yml
    
    - name: 테스트 yml파일 생성
      run: |
        mkdir -p ./src/test/resources
        cd ./src/test/resources
        touch ./testMyInfo.yml
        echo "${{ secrets.TESTMYINFO }}" > ./testMyInfo.yml
   
    - name: Gradle 설치
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
   
    - name: Gradlew로 빌드(테스트 스킵)
      run: ./gradlew build -x test
